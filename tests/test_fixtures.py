import pytest

# üîÅ –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É –æ–∫—Ä–µ–º–æ
@pytest.fixture(scope="function")
def func_data():
    print("üîÅ [function scope] —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    return ["—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ"]

# üì¶ –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –≤–µ—Å—å —Ñ–∞–π–ª
@pytest.fixture(scope="module")
def module_data():
    print("üì¶ [module scope] —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    return {"–º–æ–¥—É–ª—å": True}

# üåç –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å—ñ—î—ó —Å–µ—Å—ñ—ó —Ç–µ—Å—Ç—ñ–≤
@pytest.fixture(scope="session")
def session_data():
    print("üåç [session scope] —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    return {"—Å–µ—Å—ñ—è": "–∞–∫—Ç–∏–≤–Ω–∞"}

# --- –¢–µ—Å—Ç–∏ –∑ function scope ---
def test_func_1(func_data):
    print("‚úÖ test_func_1")
    assert "—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ" in func_data

def test_func_2(func_data):
    print("‚úÖ test_func_2")
    assert len(func_data) == 1

# --- –¢–µ—Å—Ç–∏ –∑ module scope ---
def test_mod_1(module_data):
    print("‚úÖ test_mod_1")
    assert module_data["–º–æ–¥—É–ª—å"]

def test_mod_2(module_data):
    print("‚úÖ test_mod_2")
    assert isinstance(module_data, dict)

# --- –¢–µ—Å—Ç–∏ –∑ session scope ---
def test_sess_1(session_data):
    print("‚úÖ test_sess_1")
    assert session_data["—Å–µ—Å—ñ—è"] == "–∞–∫—Ç–∏–≤–Ω–∞"

def test_sess_2(session_data):
    print("‚úÖ test_sess_2")
    assert "—Å–µ—Å—ñ—è" in session_data
